"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6341],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>k});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),l=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(c.Provider,{value:e},t.children)},m="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),m=l(n),u=a,k=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(k,i(i({ref:e},p),{},{components:n})):r.createElement(k,i({ref:e},p))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s[m]="string"==typeof t?t:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4781:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:20},i="State Matchers",s={unversionedId:"multiblocks/state-matchers/state-matchers",id:"multiblocks/state-matchers/state-matchers",title:"State Matchers",description:"Each state matcher represents one block at one specific position in the multiblock, and depending on the type of matcher it may only allow one specific block, or a wide range of blocks in that position.",source:"@site/docs/multiblocks/state-matchers/state-matchers.md",sourceDirName:"multiblocks/state-matchers",slug:"/multiblocks/state-matchers/",permalink:"/modonomicon/docs/multiblocks/state-matchers/",draft:!1,editUrl:"https://github.com/klikli-dev/modonomicon/tree/documentation/docs/multiblocks/state-matchers/state-matchers.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Sparse Multiblock",permalink:"/modonomicon/docs/multiblocks/defining-multiblocks/sparse-multiblocks"},next:{title:"Any Matcher",permalink:"/modonomicon/docs/multiblocks/state-matchers/any-matcher"}},c={},l=[{value:"Common Attributes",id:"common-attributes",level:2},{value:"<strong>type</strong> (State Matcher Type, <em>mandatory</em>)",id:"type-state-matcher-type-mandatory",level:3},{value:"Attribute Types",id:"attribute-types",level:2},{value:"<strong>Block</strong> (String)",id:"block-string",level:3},{value:"<strong>BlockState</strong> (String)",id:"blockstate-string",level:3},{value:"<strong>Tag</strong> (String)",id:"tag-string",level:3}],p={toc:l},m="wrapper";function d(t){let{components:e,...n}=t;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"state-matchers"},"State Matchers"),(0,a.kt)("p",null,"Each state matcher represents one block at one specific position in the multiblock, and depending on the type of matcher it may only allow one specific block, or a wide range of blocks in that position. "),(0,a.kt)("p",null,"State matchers are defined ",(0,a.kt)("a",{parentName:"p",href:"/modonomicon/docs/multiblocks/defining-multiblocks/#mappings"},"in the ",(0,a.kt)("inlineCode",{parentName:"a"},"mappings")," part of the multiblock definition"),"."),(0,a.kt)("h2",{id:"common-attributes"},"Common Attributes"),(0,a.kt)("p",null,"All state matchers need to have the following attributes:"),(0,a.kt)("h3",{id:"type-state-matcher-type-mandatory"},(0,a.kt)("strong",{parentName:"h3"},"type")," (State Matcher Type, ",(0,a.kt)("em",{parentName:"h3"},"mandatory"),")"),(0,a.kt)("p",null,"A ResourceLocation identifying the type of state matcher to use.",(0,a.kt)("br",{parentName:"p"}),"\n","Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"modonomicon:block")," "),(0,a.kt)("h2",{id:"attribute-types"},"Attribute Types"),(0,a.kt)("p",null,"Besides standard JSON types, state matchers support the following attributes:"),(0,a.kt)("h3",{id:"block-string"},(0,a.kt)("strong",{parentName:"h3"},"Block")," (String)"),(0,a.kt)("p",null,"  A ResourceLocation for a block, in the format ",(0,a.kt)("inlineCode",{parentName:"p"},"modid:block"),".",(0,a.kt)("br",{parentName:"p"}),"\n","Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"minecraft:stone")," "),(0,a.kt)("h3",{id:"blockstate-string"},(0,a.kt)("strong",{parentName:"h3"},"BlockState")," (String)"),(0,a.kt)("p",null,"  A BlockState string as used in the Minecraft ",(0,a.kt)("inlineCode",{parentName:"p"},"setblock")," command.",(0,a.kt)("br",{parentName:"p"}),"\n","Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"minecraft:chest[facing=east]"),".  "),(0,a.kt)("p",null,"  The block state properties can be omitted, in which case the default BlockState will be used.",(0,a.kt)("br",{parentName:"p"}),"\n","Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"minecraft:chest"),"."),(0,a.kt)("p",null,"  See ",(0,a.kt)("a",{parentName:"p",href:"https://minecraft.fandom.com/wiki/Commands/setblock"},"https://minecraft.fandom.com/wiki/Commands/setblock")," for more information"),(0,a.kt)("h3",{id:"tag-string"},(0,a.kt)("strong",{parentName:"h3"},"Tag")," (String)"),(0,a.kt)("p",null,"  A Tag string that is based on the BlockState string as used in the ",(0,a.kt)("inlineCode",{parentName:"p"},"setblock")," command, but prefixed with ",(0,a.kt)("inlineCode",{parentName:"p"},"#"),".",(0,a.kt)("br",{parentName:"p"}),"\n","Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"#forge:chests[facing=east]")),(0,a.kt)("p",null,"  The block state properties can be omitted, in which case the block state properties will be ignored when matching.",(0,a.kt)("br",{parentName:"p"}),"\n","Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"#forge:chests"),"."))}d.isMDXComponent=!0}}]);