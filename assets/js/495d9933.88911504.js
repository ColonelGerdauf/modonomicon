"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9993],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>k});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(o),h=n,k=c["".concat(s,".").concat(h)]||c[h]||m[h]||i;return o?a.createElement(k,r(r({ref:t},d),{},{components:o})):a.createElement(k,r({ref:t},d))}));function k(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,r=new Array(i);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,r[1]=l;for(var p=2;p<i;p++)r[p]=o[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,o)}h.displayName="MDXCreateElement"},4354:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=o(7462),n=(o(7294),o(3905));const i={sidebar_position:30},r="Step 3: Creating the Book",l={unversionedId:"getting-started/step-by-step-with-datagen/step3",id:"getting-started/step-by-step-with-datagen/step3",title:"Step 3: Creating the Book",description:"Now it is time to add code to generate our book, a first category and an entry with a page.",source:"@site/docs/getting-started/step-by-step-with-datagen/step3.md",sourceDirName:"getting-started/step-by-step-with-datagen",slug:"/getting-started/step-by-step-with-datagen/step3",permalink:"/modonomicon/docs/getting-started/step-by-step-with-datagen/step3",draft:!1,editUrl:"https://github.com/klikli-dev/modonomicon/tree/documentation/docs/getting-started/step-by-step-with-datagen/step3.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Step 2: A first look at the Demo Project",permalink:"/modonomicon/docs/getting-started/step-by-step-with-datagen/step2"},next:{title:"Step 4: Adding texts",permalink:"/modonomicon/docs/getting-started/step-by-step-with-datagen/step4"}},s={},p=[{value:"Preparations: Java Imports",id:"preparations-java-imports",level:2},{value:"Our first Book",id:"our-first-book",level:2},{value:"Our first Category",id:"our-first-category",level:2},{value:"Our first Entry",id:"our-first-entry",level:2},{value:"Results",id:"results",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...i}=e;return(0,n.kt)(c,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"step-3-creating-the-book"},"Step 3: Creating the Book"),(0,n.kt)("p",null,"Now it is time to add code to generate our book, a first category and an entry with a page.\nWe will focus on the structure and layout of the book in this step, and add the texts in the next step."),(0,n.kt)("p",null,"If you are impatient you can skip ahead to ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"#results"},"Results"))," to see what we will be creating."),(0,n.kt)("h2",{id:"preparations-java-imports"},"Preparations: Java Imports"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Open ",(0,n.kt)("inlineCode",{parentName:"li"},"DemoBookProvider.java")," in your IDE or text editor."),(0,n.kt)("li",{parentName:"ol"},"Below ",(0,n.kt)("inlineCode",{parentName:"li"},"package ...")," but above ",(0,n.kt)("inlineCode",{parentName:"li"},"public class ...")," add the following lines:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.klikli_dev.modonomicon.api.datagen.BookProvider;\nimport com.klikli_dev.modonomicon.api.datagen.book.BookModel;\nimport net.minecraft.data.PackOutput;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraftforge.common.data.LanguageProvider;\n")))),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"If you are using an IDE it might do this step for you.")),(0,n.kt)("h2",{id:"our-first-book"},"Our first Book"),(0,n.kt)("p",null,"The code for just an empty book is already present if you cloned the step1 branch."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Open ",(0,n.kt)("inlineCode",{parentName:"p"},"DemoBookProvider.java")," in your IDE or text editor.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"In the ",(0,n.kt)("inlineCode",{parentName:"p"},"DemoBookProvider")," constructor, note that we hand ",(0,n.kt)("inlineCode",{parentName:"p"},'"demo"')," to the super constructor - that is our book id.\nIt will be used in our context ",(0,n.kt)("inlineCode",{parentName:"p"},"BookContextHelper")," (acessible via ",(0,n.kt)("inlineCode",{parentName:"p"},"this.context()"),") to create DescriptionIds/Translation Keys and ResourceLocations.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"In the Method ",(0,n.kt)("inlineCode",{parentName:"p"},"generateBook")," we see some code that sets up a basic book model for us"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'@Override\nprotected BookModel generateBook() {\n    var demoBook = BookModel.create(\n                    this.modLoc(this.context().book), //the id of the book. modLoc() prepends the mod id.\n                    this.context().bookName() //the name of the book. The lang helper gives us the correct translation key.\n            )\n            .withTooltip(this.context().bookTooltip()) //the hover tooltip for the book. Again we get a translation key.\n            .withGenerateBookItem(true) //auto-generate a book item for us.\n            .withModel(new ResourceLocation("modonomicon:modonomicon_red")) //use the default red modonomicon icon for the book\n            .withCreativeTab(new ResourceLocation("modonomicon", "modonomicon")) //and put it in the modonomicon tab\n            ;\n\n    return demoBook;\n}\n')))),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Note the use of ",(0,n.kt)("inlineCode",{parentName:"p"},"this.context()"),". We will use it a lot - whenever we work on a new piece of the book we update the context, which then allows us to retrieve context information (such as the translation key to set the text of a specific page) easily.")),(0,n.kt)("p",null,"This will generate a book for us. Let's test how that works!"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"In the terminal, run ",(0,n.kt)("inlineCode",{parentName:"li"},"./gradlew runData")," to generate the json file(s)."),(0,n.kt)("li",{parentName:"ol"},"After it is complete, run ",(0,n.kt)("inlineCode",{parentName:"li"},"./gradlew runClient")," to start Minecraft."),(0,n.kt)("li",{parentName:"ol"},"Create or join a world with cheats enabled."),(0,n.kt)("li",{parentName:"ol"},"Switch to creative mode with ",(0,n.kt)("inlineCode",{parentName:"li"},"/gamemode creative"),"."),(0,n.kt)("li",{parentName:"ol"},'Open the inventory and look for the "Modonomicon" creative tab or the search tab.'),(0,n.kt)("li",{parentName:"ol"},"There will be two purple books - the builtin modonomicon demos - and one red book, the one we just generated."),(0,n.kt)("li",{parentName:"ol"},"Take it into your hotbar and take a look at it",(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"You will notice a weird text for the name and tooltip: ",(0,n.kt)("inlineCode",{parentName:"li"},"book.modonomicon_demo_book.demo.name")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"book.modonomicon_demo_book.demo.tooltip")," This is because we haven't added any translations yet."))),(0,n.kt)("li",{parentName:"ol"},"Right click with the book in hand."),(0,n.kt)("li",{parentName:"ol"},"Crash! That's ok - if we do not add any categories the book does not know what to display. Let's fix that!")),(0,n.kt)("h2",{id:"our-first-category"},"Our first Category"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Open ",(0,n.kt)("inlineCode",{parentName:"p"},"DemoBookProvider.java"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Add the following code to the bottom of the file, before the last ",(0,n.kt)("inlineCode",{parentName:"p"},"}"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},'private BookCategoryModel makeFeaturesCategory() {\n    this.context().category("features"); //set context to our new category\n\n    //the entry map is another helper for book datagen\n    //it allows us to place entries in the category without manually defining the coordinates.\n    //each letter can be used to represent an entry\n    //Note that getting it this way is deprecated, but will not be removed.\n    //  it is just a hint that it is better to use CategoryProviders, for an example see https://github.com/klikli-dev/modonomicon/tree/version/1.20.1/src/main/java/com/klikli_dev/modonomicon/datagen/book\n    var entryMap = ModonomiconAPI.get().getEntryMap();\n    entryMap.setMap(\n            "_____________________",\n            "__m______________d___",\n            "__________r__________",\n            "__c__________________",\n            "__________2___3___i__",\n            "__s_____e____________"\n    );\n\n    return BookCategoryModel.create(\n                    this.modLoc(this.context().category), //the id of the category, as stored in the lang helper. modLoc() prepends the mod id.\n                    this.context().categoryName() //the name of the category. The lang helper gives us the correct translation key.\n            )\n            .withIcon("minecraft:nether_star") //the icon for the category. In this case we simply use an existing item.\n            .withEntries(multiblockEntry);\n}\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Now we need to add our category to the book. In ",(0,n.kt)("inlineCode",{parentName:"p"},"generateBook")," add:"),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Right at the start:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"var featuresCategory = this.makeFeaturesCategory();\n")),(0,n.kt)("p",{parentName:"li"},"This calls our newly created method that makes our category.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"below ",(0,n.kt)("inlineCode",{parentName:"p"},'.withCreativeTab("modonomicon")'),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},".withCategories(\n        featuresCategory\n);\n")),(0,n.kt)("p",{parentName:"li"},"And with this we hand over the category to be added to the book."))))),(0,n.kt)("p",null,'This will create a category with the id "features" using a nether star as icon and add it to our book. See also ',(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"/modonomicon/docs/basics/structure/categories#attributes"},"Categories"))," to learn more about the other attributes of a category, and how icons work.    "),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Note the use of ",(0,n.kt)("inlineCode",{parentName:"p"},"entryMap"),". This is a helper that allows us to visualize how our category will look and use that to get the right coordinates without manually experimenting.")),(0,n.kt)("p",null,"Let's see if that fixed our crash:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"In the terminal, run ",(0,n.kt)("inlineCode",{parentName:"li"},"./gradlew runData")," to generate the json file(s)."),(0,n.kt)("li",{parentName:"ol"},"After it is complete, run ",(0,n.kt)("inlineCode",{parentName:"li"},"./gradlew runClient")," to start Minecraft."),(0,n.kt)("li",{parentName:"ol"},"Re-join our old world."),(0,n.kt)("li",{parentName:"ol"},"Right click with the book in hand."),(0,n.kt)("li",{parentName:"ol"},"Et voila:\n",(0,n.kt)("img",{alt:"Category",src:o(9715).Z,width:"1920",height:"1009"})),(0,n.kt)("li",{parentName:"ol"},"Success! No crash, but no content either. Not too bad, right?"),(0,n.kt)("li",{parentName:"ol"},"You will notice that when hovering over the category's button on the left side we again have a weird text instead of a nice category name - no worries, we'll fix that later!")),(0,n.kt)("h2",{id:"our-first-entry"},"Our first Entry"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Open ",(0,n.kt)("inlineCode",{parentName:"p"},"DemoBookProvider.java"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("ol",{parentName:"li",start:2},(0,n.kt)("li",{parentName:"ol"},"Add the following code to the bottom of the file, before the last ",(0,n.kt)("inlineCode",{parentName:"li"},"}"),":")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},' private BookEntryModel makeMultiblockEntry(CategoryEntryMap entryMap, char location) {\n    this.context().entry("multiblock"); //tell our context the entry we are in. It puts it on top of the category.\n\n    this.context().page("intro"); //and now the page\n    var multiBlockIntroPage =\n            BookTextPageModel.builder() //we start with a text page\n                    .withText(this.context().pageText()) //now we can use the context to retrieve the description id for the text\n                    .withTitle(this.context().pageTitle()) //and for the title\n                    .build();\n\n    this.context().page("multiblock"); //next page\n    var multiblockPreviewPage =\n            BookMultiblockPageModel.builder() //now a page to show a multiblock\n                    .withMultiblockId("modonomicon:blockentity") //sample multiblock from modonomicon\n                    .withMultiblockName("multiblocks.modonomicon_demo_book.blockentity") //and the lang key for its name\n                    .withText(this.context().pageText()) //plus a page text\n                    .build();\n\n    return BookEntryModel.builder()\n            .withId(this.modLoc(this.context().category + "/" + this.context().entry)) //make entry id from lang helper data. It is good practice to use the category as a prefix like this which causes the entry to be in a subfolder.\n            .withName(this.context().entryName()) //entry name lang key\n            .withDescription(this.context().entryDescription()) //entry description lang key\n            .withIcon("minecraft:furnace") //we use furnace as icon\n            .withLocation(entryMap.get(location)) //and we place it at the location we defined earlier in the entry helper mapping\n            .withPages(multiBlockIntroPage, multiblockPreviewPage) //finally we add our pages to the entry\n            .build();\n}\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Now we need to add our entry to the features category. In ",(0,n.kt)("inlineCode",{parentName:"p"},"makeFeaturesCategory")," add:"),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},"below ",(0,n.kt)("inlineCode",{parentName:"li"},"entryMap.setMap( ... );"),":",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"//place the multiblock entry where we put the \"m\" in the map above\nvar multiblockEntry = this.makeMultiblockEntry(entryMap, 'm');\n"))),(0,n.kt)("li",{parentName:"ol"},"below ",(0,n.kt)("inlineCode",{parentName:"li"},'.withIcon("minecraft:nether_star")'),":",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},".withEntries(\n        multiblockEntry\n);\n")))))),(0,n.kt)("p",null,"This will create an entry with a text page and a page that displays a multiblock.\nText and title properties can be skipped, then the page will simply not use them. Especially pages with content like multiblocks or recipes may not need a text, or are better off without a text because there is only very little space on the page, and you can always add additional text pages to explain things in more detail."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"For now let's not worry about multiblocks - we're using a demo one that comes with modonomicon. Later you can define your own multiblocks.")),(0,n.kt)("p",null,"Let's take a look at our entry!"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"In the terminal, run ",(0,n.kt)("inlineCode",{parentName:"li"},"./gradlew runData")," to generate the json file(s)."),(0,n.kt)("li",{parentName:"ol"},"After it is complete, run ",(0,n.kt)("inlineCode",{parentName:"li"},"./gradlew runClient")," to start Minecraft."),(0,n.kt)("li",{parentName:"ol"},"Re-join our old world."),(0,n.kt)("li",{parentName:"ol"},"Right click with the book in hand."),(0,n.kt)("li",{parentName:"ol"},"Find and click the entry in the book (you may have to zoom/pan to find it)\n",(0,n.kt)("img",{alt:"Entry",src:o(3106).Z,width:"1920",height:"1009"})),(0,n.kt)("li",{parentName:"ol"},"Still no nice texts, but we see a multiblock, so that's pretty good, right?")),(0,n.kt)("h2",{id:"results"},"Results"),(0,n.kt)("p",null,"You can view the final code for this step in the branch for step 3: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/klikli-dev/modonomicon-demo-book/tree/guide/step3"},"https://github.com/klikli-dev/modonomicon-demo-book/tree/guide/step3")," "),(0,n.kt)("p",null,'Using the green "Code" Button and "Download ZIP" you can download the code for this step as a zip file to compare to your code.'),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"There is no branch for step 2, because that was only reviewing the files you downloaded in step 1!")))}m.isMDXComponent=!0},9715:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/step3-create-category-28a641dcc27b41aa45694a71b4537765.png"},3106:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/step3-create-entry-eaa2c11fdbcd15cb6eb992b668e9f02a.png"}}]);