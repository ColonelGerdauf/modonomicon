"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9383],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return k}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),s=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},p=function(t){var e=s(t.components);return a.createElement(c.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=s(n),k=r,f=u["".concat(c,".").concat(k)]||u[k]||m[k]||o;return n?a.createElement(f,l(l({ref:e},p),{},{components:n})):a.createElement(f,l({ref:e},p))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i.mdxType="string"==typeof t?t:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6638:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return s}});var a=n(3117),r=(n(7294),n(3905));const o={sidebar_position:30},l="Block State Matcher",i={unversionedId:"multiblocks/state-matchers/blockstate-matcher",id:"multiblocks/state-matchers/blockstate-matcher",title:"Block State Matcher",description:"Typeblockstate",source:"@site/docs/multiblocks/state-matchers/blockstate-matcher.md",sourceDirName:"multiblocks/state-matchers",slug:"/multiblocks/state-matchers/blockstate-matcher",permalink:"/modonomicon/docs/multiblocks/state-matchers/blockstate-matcher",draft:!1,editUrl:"https://github.com/klikli-dev/modonomicon/tree/documentation/docs/multiblocks/state-matchers/blockstate-matcher.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Block Matcher",permalink:"/modonomicon/docs/multiblocks/state-matchers/block-matcher"},next:{title:"Block State Property Matcher",permalink:"/modonomicon/docs/multiblocks/state-matchers/blockstate-property-matcher"}},c={},s=[{value:"Attributes",id:"attributes",level:2},{value:"Usage Examples",id:"usage-examples",level:2}],p={toc:s};function m(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"block-state-matcher"},"Block State Matcher"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"modonomicon:blockstate")),(0,r.kt)("p",null,"BlockState matchers will check for ",(0,r.kt)("strong",{parentName:"p"},"all existing properties for a Block")," BlockState. "),(0,r.kt)("p",null,":::warn"),(0,r.kt)("p",null,"Block State Matchers  match against the full blockstate (= all blockstate properties the block has).\nIf you do not provide a value for any of the properties, it will check against the default value."),(0,r.kt)("p",null,":::"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In most use cases you will want to check only against the properties you actually provide, and ignore all other properties.\nFor this behaviour, see ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"./blockstate-property-matcher"},"BlockStateProperty Matcher")),".")),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"block")," (BlockState, ",(0,r.kt)("em",{parentName:"p"},"mandatory"),")"),(0,r.kt)("p",{parentName:"li"},"BlockState to match against when checking if a given block fits this matcher."),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you omit the BlockState properties (",(0,r.kt)("inlineCode",{parentName:"p"},"[key=value]"),"), Modonomicon will match against it's default BlockState. "))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"display")," (BlockState, ",(0,r.kt)("em",{parentName:"p"},"optional"),")"),(0,r.kt)("p",{parentName:"li"},"Defaults to the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"block")," property.",(0,r.kt)("br",{parentName:"p"}),"\n","The block to display in the multiblock preview. "),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you omit the BlockState properties (",(0,r.kt)("inlineCode",{parentName:"p"},"[key=value]"),"), Modonomicon will display the Block's default BlockState.")))),(0,r.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")," Matching only west-facing chests, but displaying an east-facing chest"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "modonomicon:blockstate",\n    "display": "minecraft:chest[facing=east]",\n    "block": "minecraft:chest[facing=west]"\n}\n')))}m.isMDXComponent=!0}}]);