"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2370],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),s=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(i.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,d=m["".concat(i,".").concat(u)]||m[u]||k[u]||a;return n?o.createElement(d,l(l({ref:t},p),{},{components:n})):o.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[m]="string"==typeof e?e:r,l[1]=c;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7694:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>k,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:20},l="Block Matcher",c={unversionedId:"multiblocks/state-matchers/block-matcher",id:"multiblocks/state-matchers/block-matcher",title:"Block Matcher",description:"Typeblock",source:"@site/docs/multiblocks/state-matchers/block-matcher.md",sourceDirName:"multiblocks/state-matchers",slug:"/multiblocks/state-matchers/block-matcher",permalink:"/modonomicon/docs/multiblocks/state-matchers/block-matcher",draft:!1,editUrl:"https://github.com/klikli-dev/modonomicon/tree/documentation/docs/multiblocks/state-matchers/block-matcher.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Any Matcher",permalink:"/modonomicon/docs/multiblocks/state-matchers/any-matcher"},next:{title:"Block State Matcher",permalink:"/modonomicon/docs/multiblocks/state-matchers/blockstate-matcher"}},i={},s=[{value:"Attributes",id:"attributes",level:2},{value:"<strong>block</strong> (Block, <em>mandatory</em>)",id:"block-block-mandatory",level:3},{value:"<strong>display</strong> (BlockState, <em>optional</em>)",id:"display-blockstate-optional",level:3},{value:"Usage Examples",id:"usage-examples",level:2}],p={toc:s},m="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"block-matcher"},"Block Matcher"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"modonomicon:block")),(0,r.kt)("p",null,"Block matchers will ignore the BlockState and check only if the placed block fits the configured block."),(0,r.kt)("h2",{id:"attributes"},"Attributes"),(0,r.kt)("h3",{id:"block-block-mandatory"},(0,r.kt)("strong",{parentName:"h3"},"block")," (Block, ",(0,r.kt)("em",{parentName:"h3"},"mandatory"),")"),(0,r.kt)("p",null,"  The Block to match against when checking if a given block fits this matcher."),(0,r.kt)("h3",{id:"display-blockstate-optional"},(0,r.kt)("strong",{parentName:"h3"},"display")," (BlockState, ",(0,r.kt)("em",{parentName:"h3"},"optional"),")"),(0,r.kt)("p",null,"  Defaults to the default BlockState of the ",(0,r.kt)("inlineCode",{parentName:"p"},"block")," property.",(0,r.kt)("br",{parentName:"p"}),"\n","The BlockState to display in the multiblock preview. "),(0,r.kt)("p",null,"  :::info"),(0,r.kt)("p",null,"  If you omit the BlockState properties (",(0,r.kt)("inlineCode",{parentName:"p"},"[key=value]"),"), Modonomicon will display the Block's default BlockState."),(0,r.kt)("p",null,"  :::"),(0,r.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")," Matching (and displaying) a stone block"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "modonomicon:block",\n  "block": "minecraft:stone"\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")," Matching any chest, but displaying a west-facing chest"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "modonomicon:block",\n    "display": "minecraft:chest[facing=west]",\n    "block": "minecraft:chest"\n}\n')))}k.isMDXComponent=!0}}]);